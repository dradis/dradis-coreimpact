module Coreimpact
  class Vulnerability
    def initialize(xml_vulnerability)
      @xml = xml_vulnerability
    end

    def supported_fields
      [:cve, :description, :title]
    end

    def respond_to?(method, include_private = false)
      return true if supported_fields.include?(method.to_sym)

      super
    end

    # Example XML:
    # <property type="container" key="Vulnerabilities" readonly="0" eraseable="1" priority="0">
    #   <property type="container" key="CVE-1999-0516" readonly="0" eraseable="1" priority="0">
    #     <property type="container" key="Modules" readonly="0" eraseable="1" priority="0">
    #       <property type="container" key="SNMP Identity Verifier" readonly="0" eraseable="1" priority="0">
    #         <property type="string" key="description" readonly="0" eraseable="1" priority="0">
    #           An SNMP community name is guessable.
    #         </property>
    #       </property>
    #     </property>
    #   </property>
    # </property>
    def method_missing(method, *args)
      # We could remove this check and return nil for any non-recognized tag.
      # The problem would be that it would make tricky to debug problems with
      # typos. For instance: <>.potr would return nil instead of raising an
      # exception
      unless supported_fields.include?(method)
        super
        return
      end

      result =
        case method
        when :cve
          @xml.first_element_child['key']
        when :description
          @xml.at_xpath('//property[@key="description"]').text
        when :title
          @xml.at_xpath('//property[@key="Modules"]').first_element_child['key']
        end

      result || 'n/a'
    end
  end
end
